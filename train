import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

# Load the existing improved dataset
df = pd.read_csv('customer_churn_dataset_improved.csv')

# Step 2: Preprocessing
le = LabelEncoder()
categorical_cols = ['Contract_Type', 'Payment_Method', 'Tech_Support', 'Internet_Service', 'Churn']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

X = df.drop(['CustomerID', 'Churn'], axis=1)
y = df['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Hyperparameter tuning with GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}
rf = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(rf, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(X_train, y_train)

# Best model
best_model = grid_search.best_estimator_
print(f"Best Parameters: {grid_search.best_params_}")

# Step 4: Evaluate the model
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['Not Churn', 'Churn']))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Step 5: Save the model
joblib.dump(best_model, 'rf_churn_model_improved.pkl')
print("\nImproved model saved as 'rf_churn_model_improved.pkl'")
